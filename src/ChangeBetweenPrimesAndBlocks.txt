/*
#include "header/ChangeBetweenPrimesAndBlocks.hpp"

// TODO look into making this a class
//  - two classes
//  - going from num -> bytes has bytes as the data being worked on
//  - going from bytes -> nums has numbers as the data being worked on
//  - this might allow us to deal with stuff better
namespace EndpointConversion {
    std::size_t blockSize(std::uint64_t lo, std::uint64_t hi) {
        return FastMath::fastDivideBy30(hi) - FastMath::fastDivideBy30(lo);
    }

    std::size_t blockPopcount(const std::span<const std::uint8_t> block) {
        assert(block.size() > 0);
        std::size_t result = 0;
        for (const std::uint8_t &el: block)
            result += std::popcount(el);
        return result;
    }

    void adjustBlockSize(const std::span<const std::uint64_t> primesIn, std::vector<std::uint8_t> primesOut) {
        primesOut.resize(blockSize(primesIn.front(), primesIn.back()));
    }

    std::uint64_t extractNextPrime(std::uint64_t block, std::uint8_t mask) {
        return ProjectConstants::primorial_values[ProjectConstants::rb5_index] * block 
            + ProjectConstants::mask_to_offset[(-mask & mask)];
    }

    void decompressBlock(
            const std::span<const std::uint8_t> primesIn, 
            const std::span<std::uint64_t> primesOut, 
            std::uint64_t offset) {
        for (std::size_t i = 0, j = 0; i < primesIn.size(); i++)
            if (primesIn[i])    // blocks with primes require bits to be on 
                for (std::uint8_t mask = primesIn[i]; mask; mask ^= (-mask & mask)) // turn off lsb each iteration
                    primesOut[j++] = extractNextPrime(offset + i, mask);
    }

    void compressBlock(
            const std::span<const std::uint64_t> primesIn, 
            const std::span<std::uint8_t> primesOut) {
        std::fill(primesOut.begin(), primesOut.end(), 0);
        for(const auto& prime: primesIn)
            primesOut[FastMath::fastDivideBy30(prime) % primesOut.size()] |= ProjectConstants::offset_to_mask[FastMath::fastModBy30(prime)];
    }
}
*/
